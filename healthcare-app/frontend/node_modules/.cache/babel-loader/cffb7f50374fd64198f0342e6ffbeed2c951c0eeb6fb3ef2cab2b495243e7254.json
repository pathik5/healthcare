{"ast":null,"code":"var _jsxFileName = \"/Users/pathik/Desktop/personal-finance-app/healthcare/healthcare-app/frontend/src/pages/LocatorPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\n// Set the container style for the map\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '100vh'\n};\nconst LocatorPage = () => {\n  _s();\n  const [hospitalLocations, setHospitalLocations] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n\n  // Get user's current location using the Geolocation API\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setUserLocation({\n          lat: latitude,\n          lng: longitude\n        });\n      }, error => {\n        console.error(\"Error getting user location: \", error);\n        // Fallback to a default location if geolocation fails\n        setUserLocation({\n          lat: 40.730610,\n          lng: -73.935242\n        });\n      });\n    } else {\n      // If geolocation is not supported, use default location\n      setUserLocation({\n        lat: 40.730610,\n        lng: -73.935242\n      });\n    }\n  }, []);\n\n  // Simulate fetching nearby hospital data. Replace this with real API data.\n  useEffect(() => {\n    const hospitals = [{\n      id: 1,\n      name: 'Hospital A',\n      lat: 40.730610,\n      lng: -73.935242\n    }, {\n      id: 2,\n      name: 'Hospital B',\n      lat: 40.735610,\n      lng: -73.925242\n    }, {\n      id: 3,\n      name: 'Hospital C',\n      lat: 40.740610,\n      lng: -73.920242\n    }];\n    setHospitalLocations(hospitals); // Set the hospital locations to state\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"locator-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Nearby Hospitals\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: \"YOUR_GOOGLE_MAPS_API_KEY\",\n      children: userLocation ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: userLocation // Center the map on the user's location\n        ,\n        zoom: 12,\n        children: hospitalLocations.map(hospital => /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: hospital.lat,\n            lng: hospital.lng\n          },\n          title: hospital.name\n        }, hospital.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading your location...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this) // Show loading text while waiting for user's location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(LocatorPage, \"jbQk5ANWe2DC4msyTzTFxy0IBgo=\");\n_c = LocatorPage;\nexport default LocatorPage;\nvar _c;\n$RefreshReg$(_c, \"LocatorPage\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","containerStyle","width","height","LocatorPage","_s","hospitalLocations","setHospitalLocations","userLocation","setUserLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","lat","lng","error","console","hospitals","id","name","className","children","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","mapContainerStyle","center","zoom","map","hospital","title","_c","$RefreshReg$"],"sources":["/Users/pathik/Desktop/personal-finance-app/healthcare/healthcare-app/frontend/src/pages/LocatorPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\n// Set the container style for the map\nconst containerStyle = {\n  width: '100%',\n  height: '100vh',\n};\n\nconst LocatorPage = () => {\n  const [hospitalLocations, setHospitalLocations] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n\n  // Get user's current location using the Geolocation API\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setUserLocation({ lat: latitude, lng: longitude });\n        },\n        (error) => {\n          console.error(\"Error getting user location: \", error);\n          // Fallback to a default location if geolocation fails\n          setUserLocation({ lat: 40.730610, lng: -73.935242 });\n        }\n      );\n    } else {\n      // If geolocation is not supported, use default location\n      setUserLocation({ lat: 40.730610, lng: -73.935242 });\n    }\n  }, []);\n\n  // Simulate fetching nearby hospital data. Replace this with real API data.\n  useEffect(() => {\n    const hospitals = [\n      { id: 1, name: 'Hospital A', lat: 40.730610, lng: -73.935242 },\n      { id: 2, name: 'Hospital B', lat: 40.735610, lng: -73.925242 },\n      { id: 3, name: 'Hospital C', lat: 40.740610, lng: -73.920242 },\n    ];\n    setHospitalLocations(hospitals); // Set the hospital locations to state\n  }, []);\n\n  return (\n    <div className=\"locator-page\">\n      <h2>Nearby Hospitals</h2>\n      <LoadScript googleMapsApiKey=\"YOUR_GOOGLE_MAPS_API_KEY\">\n        {userLocation ? (\n          <GoogleMap\n            mapContainerStyle={containerStyle}\n            center={userLocation} // Center the map on the user's location\n            zoom={12}\n          >\n            {hospitalLocations.map((hospital) => (\n              <Marker\n                key={hospital.id}\n                position={{ lat: hospital.lat, lng: hospital.lng }}\n                title={hospital.name}\n              />\n            ))}\n          </GoogleMap>\n        ) : (\n          <p>Loading your location...</p> // Show loading text while waiting for user's location\n        )}\n      </LoadScript>\n    </div>\n  );\n};\n\nexport default LocatorPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}